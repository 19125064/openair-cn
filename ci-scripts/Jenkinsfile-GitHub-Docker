#!/bin/groovy
/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this file
 * except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */

//-------------------------------------------------------------------------------
// Abstraction function to send social media messages:
// like on Slack or Mattermost
def sendSocialMediaMessage(pipeChannel, pipeColor, pipeMessage) {
    if (params.pipelineUsesSlack != null) {
        if (params.pipelineUsesSlack) {
            slackSend channel: pipeChannel, color: pipeColor, message: pipeMessage
        }
    }
}

// Location of the CN executor node 
def cn_ci_host = params.Host_CN_CI_Server

// for lock
def cn_ci_resource = params.DockerContainers

// Location of the 2nd CN executor
def new_host_flag = false
def new_host = ""
def new_host_user = ""

//-------------------------------------------------------------------------------
// Pipeline start
pipeline {
    agent {
        label cn_ci_host
    }
    options {
        disableConcurrentBuilds()
        timestamps()
        ansiColor('xterm')
        lock(cn_ci_resource)
    }

    stages {
        stage ('Verify Parameters') {
            steps {
                script {
                    echo '\u2705 \u001B[32mVerify Parameters\u001B[0m'
                    if (params.Host_CN_CI_2nd_Server_Flag != null) {
                        new_host_flag = params.Host_CN_CI_2nd_Server_Flag
                        if (new_host_flag) {
                           new_host = params.Host_CN_CI_2nd_Server
                           new_host_user = params.Host_CN_CI_2nd_Server_Login
                           echo "1st Node   is ${NODE_NAME}"
                           echo "2nd Node   is ${new_host}"
                        } else {
                           echo "Node       is ${NODE_NAME}"
                        }
                    } else {
                        echo "Node       is ${NODE_NAME}"
                    }
                    echo "Git URL    is ${GIT_URL}"

                    removeGitHubInfo()
                    if (env.ghprbPullId != null) {
                        echo "======= THIS IS A PULL REQUEST ======"
                        echo "PR ID      is ${env.ghprbPullId}"
                        echo "PR LINK    is ${env.ghprbPullLink}"
                        echo "PR TITLE   is ${env.ghprbPullTitle}"
                        sh "./scripts/doGitHubPullRequestTempMerge.sh --src-branch ${env.ghprbSourceBranch} --src-commit ${env.ghprbActualCommit} --target-branch ${env.ghprbTargetBranch} --target-commit ${GIT_COMMIT}"
                        sh "sleep 10"
                    } else {
                        echo "======= THIS IS A PUSH EVENT ======"
                        echo "Git Branch is ${GIT_BRANCH}"
                        echo "Git Commit is ${GIT_COMMIT}"
                        // Making a hard copy of the SHA-ONE
                        getCommitSha()
                    }
                }
            }
        }
        stage ('Prepare Source Code') {
            steps {
                script {
                    sh "git clean -x -d -f > /dev/null 2>&1"
                    sh "tar -cjhf /tmp/openair-cn.tar.bz2 ."
                    sh "mv /tmp/openair-cn.tar.bz2 ."
                    copyTo2ndServer('openair-cn.tar.bz2', new_host_flag, new_host_user, new_host)
                    sh "mkdir archives"
                }
            }
        }
        stage ('Start Cassandra') {
            steps {
                script {
                    myShCmd('docker run --name cassandra-docker -d -e CASSANDRA_CLUSTER_NAME="OAI HSS Cluster" -e CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch cassandra:2.1', new_host_flag, new_host_user, new_host)
                    sh "sleep 5"
                    myShCmd('docker cp src/hss_rel14/db/oai_db.cql cassandra-docker:/home', new_host_flag, new_host_user, new_host)
                    myShCmd('docker exec -it cassandra-docker /bin/bash -c "nodetool status" | tee cassandra_status.log', new_host_flag, new_host_user, new_host)
                    sh "sleep 5"
                    Cassandra_IP = myShRetCmd('docker inspect --format="{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}" cassandra-docker', new_host_flag, new_host_user, new_host)
                    myShCmd('docker exec -it cassandra-docker /bin/bash -c "cqlsh --file /home/oai_db.cql ' + Cassandra_IP + '"', new_host_flag, new_host_user, new_host)
                }
            }
            post {
                always {
                    script {
                        copyFrom2ndServer('cassandra_status.log', new_host_flag, new_host_user, new_host)
                    }
                }
                success {
                    sh "echo 'CASSANDRA START: OK' >> archives/cassandra_status.log"
                }
                unsuccessful {
                    sh "echo 'CASSANDRA START: KO' >> archives/cassandra_status.log"
                }
            }
        }
        stage ('Start OAI HSS Container') {
            steps {
                script {
                    myShCmd('docker run --name oai-hss-docker -d ubuntu:bionic /bin/bash -c "sleep infinity"', new_host_flag, new_host_user, new_host)
                    myShCmd('docker cp ./openair-cn.tar.bz2 oai-hss-docker:/home', new_host_flag, new_host_user, new_host)
                    myShCmd('docker exec -it oai-hss-docker /bin/bash -c "cd /home && tar -xjf openair-cn.tar.bz2"', new_host_flag, new_host_user, new_host)
                    myShCmd('docker exec -it oai-hss-docker /bin/bash -c "rm -f /home/openair-cn.tar.bz2"', new_host_flag, new_host_user, new_host)
                    myShCmd('docker cp ~/.gitconfig oai-hss-docker:/root', new_host_flag, new_host_user, new_host)
                }
            }
            post {
                success {
                    sh "echo 'OAI-HSS START: OK' > archives/oai-hss-docker-start.log"
                }
                unsuccessful {
                    sh "echo 'OAI-HSS START: KO' > archives/oai-hss-docker-start.log"
                }
            }
        }
        stage ('Start OAI MME Container') {
            steps {
                script {
                    myShCmd('docker run --name oai-mme-docker -d ubuntu:bionic /bin/bash -c "sleep infinity"', new_host_flag, new_host_user, new_host)
                    myShCmd('docker cp ./openair-cn.tar.bz2 oai-mme-docker:/home', new_host_flag, new_host_user, new_host)
                    myShCmd('docker exec -it oai-mme-docker /bin/bash -c "cd /home && tar -xjf openair-cn.tar.bz2"', new_host_flag, new_host_user, new_host)
                    myShCmd('docker exec -it oai-mme-docker /bin/bash -c "rm -f /home/openair-cn.tar.bz2"', new_host_flag, new_host_user, new_host)
                    myShCmd('docker cp ~/.gitconfig oai-mme-docker:/root', new_host_flag, new_host_user, new_host)
                }
            }
            post {
                success {
                    sh "echo 'OAI-MME START: OK' > archives/oai-mme-docker-start.log"
                }
                unsuccessful {
                    sh "echo 'OAI-MME START: KO' > archives/oai-mme-docker-start.log"
                }
            }
        }
        stage('Install libs & sw') {
            parallel {
                stage ('HSS SW') {
                  steps {
                    script {
                        myShCmd('docker exec -it oai-hss-docker /bin/bash -c "apt-get update && apt-get upgrade --yes" > hss_install.log', new_host_flag, new_host_user, new_host)
                        myShCmd('docker exec -it oai-hss-docker /bin/bash -c "apt-get install --yes git psmisc" >> hss_install.log', new_host_flag, new_host_user, new_host)
                        myShCmd('docker exec -it oai-hss-docker /bin/bash -c "cd /home/scripts && ./build_hss_rel14 --check-installed-software --force" >> hss_install.log', new_host_flag, new_host_user, new_host)
                    }
                  }
                  post {
                      always {
                          script {
                              copyFrom2ndServer('hss_install.log', new_host_flag, new_host_user, new_host)
                          }
                      }
                      success {
                          sh "echo 'OAI-HSS SW INSTALL: OK' >> archives/hss_install.log"
                      }
                      unsuccessful {
                          sh "echo 'OAI-HSS SW INSTALL: KO' >> archives/hss_install.log"
                      }
                  }
                }
                stage ('MME SW') {
                  steps {
                    script {
                        myShCmd('docker exec -it oai-mme-docker /bin/bash -c "apt-get update && apt-get upgrade --yes" > mme_install.log', new_host_flag, new_host_user, new_host)
                        myShCmd('docker exec -it oai-mme-docker /bin/bash -c "apt-get install --yes git psmisc" >> mme_install.log', new_host_flag, new_host_user, new_host)
                        myShCmd('docker exec -it oai-mme-docker /bin/bash -c "cd /home/scripts && ./build_mme --check-installed-software --force" >> mme_install.log', new_host_flag, new_host_user, new_host)
                    }
                  }
                  post {
                      always {
                          script {
                              copyFrom2ndServer('mme_install.log', new_host_flag, new_host_user, new_host)
                          }
                      }
                      success {
                          sh "echo 'OAI-MME SW INSTALL: OK' >> archives/mme_install.log"
                      }
                      unsuccessful {
                          sh "echo 'OAI-MME SW INSTALL: KO' >> archives/mme_install.log"
                      }
                  }
                }
            }
        }
        stage('Build Core Network Functions') {
            parallel {
                stage ('HSS Build') {
                  steps {
                    script {
                        myShCmd('docker exec -it oai-hss-docker /bin/bash -c "cd /home/scripts && ./build_hss_rel14 --clean --build-type Release" > hss_build.log', new_host_flag, new_host_user, new_host)
                    }
                  }
                  post {
                      always {
                          script {
                              copyFrom2ndServer('hss_build.log', new_host_flag, new_host_user, new_host)
                          }
                      }
                      success {
                          sh "echo 'OAI-HSS BUILD: OK' >> archives/hss_build.log"
                      }
                      unsuccessful {
                          sh "echo 'OAI-HSS BUILD: KO' >> archives/hss_build.log"
                      }
                  }
                }
                stage ('MME Build') {
                  steps {
                    script {
                        myShCmd('docker exec -it oai-mme-docker /bin/bash -c "cd /home/scripts && ./build_mme --clean --build-type Release" > mme_build.log', new_host_flag, new_host_user, new_host)
                        myShCmd('docker cp oai-mme-docker:/home/build/log/mme.txt mme_compile.log ', new_host_flag, new_host_user, new_host)
                    }
                  }
                  post {
                      always {
                          script {
                              copyFrom2ndServer('mme_build.log', new_host_flag, new_host_user, new_host)
                              copyFrom2ndServer('mme_compile.log', new_host_flag, new_host_user, new_host)
                          }
                      }
                      success {
                          sh "echo 'OAI-MME BUILD: OK' >> archives/mme_build.log"
                      }
                      unsuccessful {
                          sh "echo 'OAI-MME BUILD: KO' >> archives/mme_build.log"
                      }
                  }
                }
            }
        }
    }
    post {
        success {
            script {
                def message = "Build job #" + BUILD_ID + " completed"
                updateGithubCommitStatus(currentBuild, message)
                def socialMessage = "OAI " + JOB_NAME + " build (" + BUILD_ID + "): passed (" + BUILD_URL + ")"
                sendSocialMediaMessage('ci-epc', 'good', socialMessage)
            }
        }
        failure {
            script {
                def message = "Build job #" + BUILD_ID + " : One step of job failed"
                updateGithubCommitStatus(currentBuild, message)
                def socialMessage = "OAI " + JOB_NAME + " build (" + BUILD_ID + "): failed (" + BUILD_URL + ")"
                sendSocialMediaMessage('ci-epc', 'danger', socialMessage)
            }
        }
        unstable {
            script {
                def message = "Build job #" + BUILD_ID + " : One step of job is unstable"
                updateGithubCommitStatus(currentBuild, message)
                def socialMessage = "OAI " + JOB_NAME + " build (" + BUILD_ID + "): unstable (" + BUILD_URL + ")"
                sendSocialMediaMessage('ci-epc', 'danger', socialMessage)
            }
        }
        aborted {
            script {
                def message = "Build job #" + BUILD_ID + " aborted: pipeline script issue?"
                updateGithubCommitStatus(currentBuild, message)
                def socialMessage = "OAI " + JOB_NAME + " build (" + BUILD_ID + "): aborted (" + BUILD_URL + ")"
                sendSocialMediaMessage('ci-epc', 'danger', socialMessage)
            }
        }
        cleanup {
            script {
                // Killing all containers
                myShCmd('docker rm -f cassandra-docker oai-hss-docker oai-mme-docker', new_host_flag, new_host_user, new_host)
                // Zipping all archived log files
                sh "zip -r -qq docker_logs.zip archives"
                if (fileExists('docker_logs.zip')) {
                    archiveArtifacts artifacts: 'docker_logs.zip'
                }
                // Sending an email to the last committer. Maybe not the Pull Request's author.
                def emailTo = getCommitterEmail()
                emailext attachmentsPattern: '*results*.html',
                     body: '''Hi,
Here are attached HTML report files for $PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!

Regards,
OAI CI Team''',
                     replyTo: 'no-reply@openairinterface.org',
                     subject: '$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!',
                     to: emailTo
            }
        }
    }
}

// Removing all info -- do not know if git clean command removes them
def removeGitHubInfo() {
  if (fileExists('.git/remote-url')) {
    sh "rm -f .git/remote-url"
  }
  if (fileExists('.git/current-commit')) {
    sh "rm -f .git/current-commit"
  }
  if (fileExists('.git/commit-email')) {
    sh "rm -f .git/commit-email"
  }
}

// GitHub retrieve email of last committer
def getCommitterEmail() {
  if (!fileExists('.git/commit-email')) {
      sh "git log -1 --pretty=format:\"%ce\" > .git/commit-email"
      // Workaround for issue when merge to develop from the Pull Request GitHub webpage
      // Click on merge button creates a commit with an email address in noreply@github.com
      sh "if [ `egrep -c \"noreply@github.com\" .git/commit-email` -eq 1 ]; then echo \"raphael.defosseux@openairinterface.org\" > .git/commit-email; fi"
  }
  return readFile(".git/commit-email").trim()
}

// Github commit update functions
def getRepoURL() {
  if (!fileExists('.git/remote-url')) {
      sh "git config --get remote.origin.url > .git/remote-url"
  }
  return readFile(".git/remote-url").trim()
}

def getCommitSha() {
  if (!fileExists('.git/current-commit')) {
    sh "git rev-parse HEAD > .git/current-commit"
  }
  return readFile(".git/current-commit").trim()
}

def updateGithubCommitStatus(build, jobMessage) {
  // workaround https://issues.jenkins-ci.org/browse/JENKINS-38674
  repoUrl = getRepoURL()
  commitSha = getCommitSha()

  step([
    $class: 'GitHubCommitStatusSetter',
    reposSource: [$class: "ManuallyEnteredRepositorySource", url: repoUrl],
    commitShaSource: [$class: "ManuallyEnteredShaSource", sha: commitSha],
    errorHandlers: [[$class: 'ShallowAnyErrorHandler']],
    statusResultSource: [
      $class: 'ConditionalStatusResultSource',
      results: [
        [$class: 'AnyBuildResult', state: build.currentResult, message: jobMessage]
      ]
    ]
  ])
}

def copyTo2ndServer(filename, flag, user, host) {
    if (flag) {
        sh "ssh ${user}@${host} 'rm -rf /tmp/CI-CN'"
        sh "ssh ${user}@${host} 'mkdir -p /tmp/CI-CN'"
        sh "scp ${filename} ${user}@${host}:/tmp/CI-CN"
        if ("openair-cn.tar.bz2".equals(filename)) {
            sh "ssh ${user}@${host} 'cd /tmp/CI-CN && tar -xjf ${filename}'"
        }
    }
}

def copyFrom2ndServer(filename, flag, user, host) {
    if (flag) {
        sh "scp ${user}@${host}:/tmp/CI-CN/${filename} archives"
    } else {
        sh "mv ${filename} archives"
    }
}

def myShCmd(cmd, flag, user, host) {
    if (flag) {
        sh "ssh -t -t ${user}@${host} 'cd /tmp/CI-CN && ${cmd}'"
    } else {
        sh "${cmd}"
    }
}

def myShRetCmd(cmd, flag, user, host) {
    if (flag) {
        ret = sh returnStdout: true, script: "ssh -t -t ${user}@${host} 'cd /tmp/CI-CN && ${cmd}'"
    } else {
        ret = sh returnStdout: true, script: "${cmd}"
    }
    ret = ret.trim()
    return ret
}
